% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sp_to_FE.R
\name{sp.to.fe}
\alias{sp.to.fe}
\title{Compute functional entities composition based on a species*traits matrix}
\usage{
sp.to.fe(sp_tr, tr_cat, fe_nm_type = "fe_rank", check.input = TRUE)
}
\arguments{
\item{sp_tr}{a \bold{dataframe} with values of traits (columns) for a set of
species (rows)}

\item{tr_cat}{a \bold{dataframe} containing three columns for each trait (rows):
\itemize{
\item \bold{trait_name}: names of all traits as in \code{sp_tr} data.frame
\item \bold{trait_type}: category codes for each trait as followed:
\emph{N} for Nominal traits (factor variable), \emph{O} for Ordinal traits
(ordered variable), \emph{C} for Circular traits (integer values), \emph{Q}
for quantitative traits (numeric values) that is allowed \strong{only} if
there are at least 2 species with the same value and \emph{F} for fuzzy-coded
traits (i.e. described with several 'sub-traits').
\item \strong{fuzzy_name} name of fuzzy-coded trait to which 'sub-trait'
belongs (if trait is not fuzzy, ignored so could be trait name or NA)
}}

\item{fe_nm_type}{a \bold{character string} referring to the type of naming functional entities.
Two possible values: \emph{"fe_rank"} (FE are named after their decreasing rank in
term of number of species \emph{i.e.} fe_1 is the one gathering
most species) and \emph{"tr_val"} (FE are named after names of traits
and of trait values for each FE, \emph{see details below}).
Default: fe_nm_type = "fe_rank".}

\item{check.input}{a \bold{logical value} allowing to test or not the inputs.
Possible error messages will thus may be more understandable for the user
than R error messages. Default: check.input = TRUE.}
}
\value{
a list of objects containing: \itemize{
\item \bold{fe_nm}: a vector containing the name of each FE
(following fe_nm_type).FE order is done according to decreasing
number of species.
\item \bold{sp_fe}: a vector containing for each species (first column)
(ordered as rows of \code{sp_tr}) the name of the FE it belongs to.
FE order is done according to decreasing number of species.
\item \bold{fe_tr}: a dataframe containing traits values (columns) for each
FE (rows). FE order is done according to decreasing number of species.
\item \bold{fe_nb_sp}: a vector containing species number per FE.
If all FE have only one species, a warning message is returned.
FE order is done according to decreasing number of species.
\item \bold{details_fe}: a list containing: \emph{fe_codes} a vector
containing character referring to traits values (like a barcode) with names
as in \code{fe_nm_type} and sorted according to \code{fe_nb_sp} ; \emph{tr_uval}
a list containing for each trait a vector of its unique values or a dataframe
for fuzzy-coded traits ; \emph{fuzzy_E} a list with for each fuzzy-coded
trait a dataframe with names of entities (E) and names of species (sp) ;
\emph{tr_nb_uval} a vector with number of unique values per trait
(or combinations for fuzzy-coded traits) ; \emph{max_nb_fe} the maximum
number of FE possible given number of unique values per trait
}
}
\description{
Compute functional entities composition based on a species*traits matrix
}
\note{
fe_nm_type = 'tr_val' is allowed \bold{only} if: \itemize{ \item
there are less than 7 traits \item none of them is fuzzy-coded (so that
names are not too long) \item all trait names and all trait values have
different 2 first letters } If these 3 conditions are valid, names of
Functional Entities are made as a character string of up to 2 letters for
trait name in upper case font then up to 2 letters for trait value in lower
case font, separated by "_" between traits. Trait names are abbreviated to
a single letter whenever possible. \emph{Examples:} ("TAc2_TBxx_TCyy" and
"TAc3_TBff_TCyy") or ("A2_Bx_Cy" & "A3_Bf_Cy")
}
\examples{
library(ade4)
data("woangers")
sp_tr <- na.omit(woangers$traits[, c("li", "pr", "fo", "he")])
sp_tr$he <- as.ordered(sp_tr$he)
tr_cat <- data.frame(
  trait_name = colnames(sp_tr),
  trait_type = c(rep("N", 2),"C", rep("O", 1)),
  fuzzy_name = NA,
  stringsAsFactors = FALSE)
mFD::sp.to.fe(sp_tr, tr_cat, fe_nm_type = "tr_val")
mFD::sp.to.fe(sp_tr, tr_cat, fe_nm_type = "fe_rank")

}
